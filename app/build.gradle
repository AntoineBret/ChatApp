apply plugin: 'com.android.application'
apply plugin: 'jacoco-android'

android {
  compileSdkVersion 27
  flavorDimensions "versionCode"
  defaultConfig {
    applicationId "com.chatapp.ipme.chatapp"
    minSdkVersion 21
    targetSdkVersion 27
    versionCode 1
    versionName "1.0"
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }
  buildTypes {
    release {
      minifyEnabled false
      debuggable false
      buildConfigField "boolean", "WITH_LOGS", "false"
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
    debug {
      debuggable true
      testCoverageEnabled = true
      buildConfigField "boolean", "WITH_LOGS", "true"
    }
    packagingOptions {
      exclude 'META-INF/rxjava.properties'
    }
    productFlavors {
      free {}
      paid {}
    }
  }
  dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //Test
    testImplementation 'junit:junit:4.12'
    implementation 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //Google
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support:cardview-v7:27.1.1'

    // RxJava & RxAndroid
    implementation 'io.reactivex.rxjava2:rxjava:2.1.10'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'

    //Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation "com.squareup.retrofit2:adapter-rxjava2:2.3.0"

    //okhttp3
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation "com.squareup.okhttp3:logging-interceptor:3.10.0"

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.7.1'
    implementation 'jp.wasabeef:glide-transformations:3.3.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.7.1'

    // JSON Parsing
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'

    //httplogger
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'

    //Architecture Components
    def archCompVersion = '1.1.1'
    implementation "android.arch.lifecycle:runtime:$archCompVersion"
    implementation "android.arch.lifecycle:extensions:$archCompVersion"
    implementation "android.arch.lifecycle:reactivestreams:$archCompVersion"

    //Timber
    implementation 'com.jakewharton.timber:timber:4.7.0'

    //BottomSheet
    implementation 'com.flipboard:bottomsheet-core:1.5.3'
    implementation 'com.flipboard:bottomsheet-commons:1.5.3'
  }
  compileOptions {
    targetCompatibility JavaVersion.VERSION_1_8
    sourceCompatibility JavaVersion.VERSION_1_8
  }
  buildToolsVersion '28.0.3'
}

project.afterEvaluate {
  //Gather build type and product flavor names in a list
  def buildTypes = android.buildTypes.collect { type -> type.name }
  def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
  if (!productFlavors) productFlavors.add('')

  productFlavors.each { productFlavorName ->
    buildTypes.each { buildTypeName ->

      //Define the sourceName and the sourcePath.
      def sourceName, sourcePath
      if (!productFlavorName) {
        sourceName = sourcePath = "${buildTypeName}"
      } else {
        sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
        sourcePath = "${productFlavorName}/${buildTypeName}"
      }

      def testTaskName = "test${sourceName.capitalize()}UnitTest"

      task "create${sourceName.capitalize()}UnitTestCoverageReport"(type: JacocoReport, dependsOn: "$testTaskName") {

        group = "Reporting"
        description =
          "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

        reports {
          xml.enabled true
          html.enabled true
        }

        //Directory where the compiled class files are
        classDirectories =
          fileTree(dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
            excludes: ['**/R.class',
                       '**/BR.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/*$ViewBinder*.*',
                       '**/BuildConfig.*',
                       'android/**',
                       '**/Manifest*.*',
                       '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                       '**/*Module.*', // Modules for Dagger.
                       '**/*Dagger*.*', // Dagger auto-generated code.
                       '**/*MembersInjector*.*', // Dagger auto-generated code.
                       '**/*_Provide*Factory*.*',
                       '**/*_Factory.*', //Dagger auto-generated code
                       '**/*$*$*.*' // Anonymous classes generated by kotlin
            ])

        sourceDirectories = files(["src/main/java",
                                   "src/$productFlavorName/java",
                                   "src/$buildTypeName/java"])

        executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
      }
    }
  }
}
